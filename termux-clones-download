#!/usr/bin/env bash
# One-Shot Clones Downloader â€” Fixed interactive menu (reads from /dev/tty) + URL editor
set -eo pipefail

# Ensure we are running under bash (re-exec under bash if not)
if [ -z "$BASH" ] || [ -z "$BASH_VERSION" ]; then
  exec bash "$0" "$@"
fi

# --------------- Paths & State ---------------
LOG_DIR="$HOME/.local/share/cryptic_termux"
APK_DIR="$HOME/apks"
TMP_DIR="$HOME/.tmp_cryptic"
STATE_DIR="$HOME/.cryptic_state"
LOG_FILE="$LOG_DIR/run.log"
CONFIG_FILE="$STATE_DIR/config.sh"

mkdir -p "$LOG_DIR" "$APK_DIR" "$TMP_DIR" "$STATE_DIR"

# --------------- Defaults ---------------
BASE_URL_DEFAULT="https://github.com/Fizlyss/cloud-phone/releases/download/er"
APK_NAMES_DEFAULT=( "Codex.0.apk" "Codex.1.apk" "Codex.2.apk" "Codex.3.apk" "Codex.4.apk" "Codex.5.apk" "Codex.6.apk" "Codex.7.apk" )

# --------------- Colors (Termux/ANSI) ---------------
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"
MAGENTA="\033[35m"; CYAN="\033[36m"; BOLD="\033[1m"; RESET="\033[0m"

# --------------- Utilities ---------------
timestamp() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }
log() { mkdir -p "$LOG_DIR"; printf "[%s] %s\n" "$(timestamp)" "$*" | tee -a "$LOG_FILE"; }
die() { printf "[%s] FATAL: %s\n" "$(timestamp)" "$*" | tee -a "$LOG_FILE" >&2; exit 1; }

http_fetch_to() {
  local url="$1" dest="$2" tmp="${dest}.part"
  rm -f "$tmp"
  if curl -fsSL --retry 5 --retry-delay 2 --connect-timeout 20 -o "$tmp" "$url" 2>>"$LOG_FILE"; then
    mv -f "$tmp" "$dest"
    return 0
  else
    rm -f "$tmp"
    return 1
  fi
}

pm_install_apk() {
  local apk="$1"
  log "Attempting install/update: $apk"
  if /system/bin/pm install -r -d --user 0 "$apk" >>"$LOG_FILE" 2>&1; then return 0; fi
  if command -v cmd >/dev/null 2>&1 && cmd package install -r "$apk" >>"$LOG_FILE" 2>&1; then return 0; fi
  if /system/bin/pm install "$apk" >>"$LOG_FILE" 2>&1; then return 0; fi
  return 1
}

ensure_packages() {
  log "Ensuring basic packages (curl, jq, coreutils)..."
  apt update -y >>"$LOG_FILE" 2>&1 || true
  apt install -y curl coreutils jq busybox procps unzip >>"$LOG_FILE" 2>&1 || true
}

ensure_storage() {
  if command -v termux-setup-storage >/dev/null 2>&1; then
    log "Ensuring Termux storage access (if applicable)..."
    termux-setup-storage >/dev/null 2>&1 || true
  fi
  mkdir -p "$APK_DIR" "$TMP_DIR" "$LOG_DIR"
}

# --------------- Load / Save config ---------------
load_config() {
  BASE_URL="$BASE_URL_DEFAULT"
  APK_NAMES=( "${APK_NAMES_DEFAULT[@]}" )
  if [ -f "$CONFIG_FILE" ]; then
    # shellcheck disable=SC1090
    source "$CONFIG_FILE" || log "Warning: failed to source $CONFIG_FILE"
  fi
}

save_config() {
  mkdir -p "$(dirname "$CONFIG_FILE")"
  {
    printf "# One-Shot Clones Downloader config (auto-saved)\n"
    printf "BASE_URL=%q\n" "$BASE_URL"
    printf "APK_NAMES=("
    for n in "${APK_NAMES[@]}"; do printf "%q " "$n"; done
    printf ")\n"
  } >"$CONFIG_FILE"
  log "Saved config to $CONFIG_FILE"
}

# --------------- UI / Panel ---------------
declare -a STATUS
init_status() {
  STATUS=()
  for i in "${!APK_NAMES[@]}"; do STATUS[$i]="${YELLOW}Pending${RESET}"; done
}

render_header() {
  clear
  cat <<'EOF'
${CYAN}${BOLD}  ____        _   _           _                 _           
 |  _ \_ _   _| |_| |__   ___ | |__   __ _  ___| |__  _   _ 
 | |_) | | | | __| '_ \ / _ \| '_ \ / _` |/ __| '_ \| | | |
 |  __/| |_| | |_| | | | (_) | |_) | (_| | (__| | | | |_| |
 |_|    \__, |\__|_| |_|\___/|_.__/ \__,_|\___|_| |_|\__, |
        |___/                                       |___/ 
${RESET}
EOF
  printf "   %s%s%s\n" "${GREEN}" "Auto download Clones" "${RESET}"
  printf "   %s%s%s\n\n" "${YELLOW}" "v.1 (one-shot mode)" "${RESET}"
  printf " %s%-30s %s %s\n" "${CYAN}" "Package Operation Status" "${RESET}" ""
  printf " %s-----------------------------------------------%s\n\n" "${CYAN}" "${RESET}"
  printf " ${BOLD}%-30s | %-15s${RESET}\n" "Package" "Status"
  printf " %s-----------------------------------------------%s\n" "${CYAN}" "${RESET}"
}

render_table() {
  render_header
  for idx in "${!APK_NAMES[@]}"; do
    local name="${APK_NAMES[$idx]}"
    printf " %-30s | %s\n" "$name" "${STATUS[$idx]}"
  done
  printf "\n"
}

set_status() {
  local idx="$1" val="$2"
  STATUS[$idx]="$val"
  render_table
}

# --------------- Input helpers (read from tty) ---------------
# Always read user input from /dev/tty so the script works even if stdin is redirected.
prompt_tty() {
  # $1 = prompt string, result returned in REPLY variable
  printf "%s" "$1" > /dev/tty
  IFS= read -r REPLY < /dev/tty || REPLY=""
}

# --------------- Interactive URL Editor ---------------
edit_urls() {
  while true; do
    clear
    echo -e "${BOLD}${CYAN}Edit download configuration${RESET}\n"
    echo -e "Current BASE_URL: ${YELLOW}$BASE_URL${RESET}\n"
    prompt_tty "Enter new BASE_URL (or press ENTER to keep): "
    newbase="$REPLY"
    if [ -n "$newbase" ]; then
      BASE_URL="$newbase"
      log "BASE_URL set to $BASE_URL"
    fi

    echo -e "\nCurrent APK list:"
    for i in "${!APK_NAMES[@]}"; do printf "  [%d] %s\n" "$i" "${APK_NAMES[$i]}"; done

    echo -e "\nActions:"
    echo "  1) Replace entire list (comma-separated)"
    echo "  2) Add an APK filename"
    echo "  3) Remove APK by index"
    echo "  4) Back to main menu"
    prompt_tty "Choose action [1-4]: "
    act="$REPLY"
    case "$act" in
      1)
        prompt_tty "Enter filenames separated by commas (no spaces): "
        csv="$REPLY"
        IFS=',' read -r -a newarr <<<"$csv"
        APK_NAMES=()
        for v in "${newarr[@]}"; do [ -n "$v" ] && APK_NAMES+=("$v"); done
        init_status
        ;;
      2)
        prompt_tty "Enter filename to add (e.g. Codex.8.apk): "
        addn="$REPLY"
        if [ -n "$addn" ]; then APK_NAMES+=("$addn"); init_status; fi
        ;;
      3)
        prompt_tty "Enter index to remove: "
        ridx="$REPLY"
        if printf '%s\n' "$ridx" | grep -qE '^[0-9]+$' && [ -n "${APK_NAMES[$ridx]}" ]; then
          unset 'APK_NAMES[ridx]'
          APK_NAMES=( "${APK_NAMES[@]}" )
          init_status
        else
          echo -e "${RED}Invalid index${RESET}"
          sleep 1
        fi
        ;;
      4)
        save_config
        return
        ;;
      *)
        echo -e "${RED}Invalid choice${RESET}"
        sleep 1
        ;;
    esac
  done
}

# --------------- One-Shot Task ---------------
task_one_shot() {
  log "Starting one-shot APK download & update..."
  ensure_packages
  ensure_storage

  local ok=0 total=${#APK_NAMES[@]}
  render_table

  local start_ts=$(date +%s)
  for idx in "${!APK_NAMES[@]}"; do
    local name="${APK_NAMES[$idx]}"
    set_status "$idx" "${YELLOW}Downloading...${RESET}"
    local url="$BASE_URL/$name" dest="$APK_DIR/$name"

    if http_fetch_to "$url" "$dest"; then
      set_status "$idx" "${CYAN}Downloaded${RESET}"
      set_status "$idx" "${CYAN}Installing...${RESET}"
      if pm_install_apk "$dest"; then
        set_status "$idx" "${GREEN}Installed/Updated${RESET}"
        rm -f "$dest"
        ok=$((ok+1))
      else
        set_status "$idx" "${RED}Install Failed${RESET}"
      fi
    else
      set_status "$idx" "${RED}Download Failed${RESET}"
    fi

    local elapsed=$(( $(date +%s) - start_ts ))
    printf "\n %sProgress:%s %d/%d    Elapsed: %s sec\n" "${MAGENTA}" "${RESET}" "$ok" "$total" "$elapsed"
  done

  log "Finished one-shot: $ok/$total installed/updated."
  prompt_tty "Press ENTER to return to menu... "
}

# --------------- Menu (shows [1] style) ---------------
print_menu() {
  clear
  printf "%s%s One-Shot Clones Downloader %s\n\n" "${BOLD}${CYAN}" "[menu]" "${RESET}"
  printf " %s[1]%s One-Shot Mode (download & update)\n" "${GREEN}" "${RESET}"
  printf " %s[2]%s Edit download URLs & APK list\n" "${YELLOW}" "${RESET}"
  printf " %s[3]%s Exit\n\n" "${RED}" "${RESET}"
  prompt_tty "Select an option [1-3]: "
  choice="$REPLY"
}

# --------------- Main Loop ---------------
load_config
init_status
unset choice

while true; do
  print_menu
  case "$choice" in
    1) task_one_shot ;;
    2) edit_urls ;;
    3) echo -e "${CYAN}Exiting. Goodbye!${RESET}"; exit 0 ;;
    *) echo -e "${RED}Invalid choice. Try again.${RESET}"; sleep 1 ;;
  esac
done
