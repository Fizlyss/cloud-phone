#!/usr/bin/env bash
# executor_downloader.sh
# One-shot APK downloader/installer with live status display (no menu, no prompts)
# - Downloads Codex.0..Codex.8 (or a custom APK list if you edit APK_NAMES)
# - Attempts to install each APK, deletes on success
# - Displays a live table of status per-package (Pending, Downloading, Downloaded, Installing, Installed, Failed)
# - Logs to ~/.local/share/executor-downloader/run.log

set -eo pipefail
IFS=$'\n\t'

# ---------------- Configuration ----------------
BASE_URL="https://github.com/Fizlyss/cloud-phone/releases/download/er"
APK_NAMES=( "Codex.0.apk" "Codex.1.apk" "Codex.2.apk" "Codex.3.apk" "Codex.4.apk" "Codex.5.apk" "Codex.6.apk" "Codex.7.apk" "Codex.8.apk" )

APP_NAME="executor-downloader"

# ---------------- Paths ----------------
LOG_DIR="$HOME/.local/share/${APP_NAME}"
APK_DIR="$HOME/apks"
TMP_DIR="$HOME/.tmp_${APP_NAME}"
STATE_DIR="$HOME/.${APP_NAME}_state"
LOG_FILE="$LOG_DIR/run.log"

mkdir -p "$LOG_DIR" "$APK_DIR" "$TMP_DIR" "$STATE_DIR"

# ---------------- Utilities ----------------
timestamp() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }

log() {
  mkdir -p "$LOG_DIR"
  printf "[%s] %s\n" "$(timestamp)" "$*" | tee -a "$LOG_FILE"
}

die() {
  printf "[%s] FATAL: %s\n" "$(timestamp)" "$*" | tee -a "$LOG_FILE" >&2
  exit 1
}

http_fetch_to() {
  # $1 url, $2 dest
  local url="$1" dest="$2" tmp="${dest}.part"
  rm -f "$tmp"
  if curl -fsSL --retry 5 --retry-delay 2 --connect-timeout 20 -o "$tmp" "$url" 2>>"$LOG_FILE"; then
    mv -f "$tmp" "$dest"
    return 0
  else
    rm -f "$tmp"
    return 1
  fi
}

pm_install_apk() {
  local apk="$1"
  log "Attempting install: $apk"
  # try pm with typical flags
  if /system/bin/pm install -r -d --user 0 "$apk" >>"$LOG_FILE" 2>&1; then
    return 0
  fi
  # fallback via cmd
  if command -v cmd >/dev/null 2>&1 && cmd package install -r "$apk" >>"$LOG_FILE" 2>&1; then
    return 0
  fi
  # final fallback
  if /system/bin/pm install "$apk" >>"$LOG_FILE" 2>&1; then
    return 0
  fi
  return 1
}

# ---------------- Status bookkeeping ----------------
declare -A STATUS
declare -A DETAIL
for name in "${APK_NAMES[@]}"; do
  STATUS["$name"]="Pending"
  DETAIL["$name"]=""
done

render_table() {
  # compact table suitable for terminals; reprint whole table each call
  printf "[H[2J"  # clear screen
  printf "%-3s %-28s %-12s %s\n" "#" "Package" "Status" "Detail"
  printf "%-3s %-28s %-12s %s\n" "--" "----------------------------" "------------" "---------------------------"
  local i=1
  for name in "${APK_NAMES[@]}"; do
    printf "%-3d %-28s %-12s %s\n" "$i" "$name" "${STATUS[$name]}" "${DETAIL[$name]}"
    i=$((i+1))
  done
  echo
}

# ---------------- Tasks (one-shot) ----------------
download_and_install_all() {
  local ok_count=0 total=${#APK_NAMES[@]}

  for name in "${APK_NAMES[@]}"; do
    local url="$BASE_URL/$name"
    local dest="$APK_DIR/$name"

    STATUS["$name"]="Downloading"
    DETAIL["$name"]="$url"
    render_table
    log "Fetching $name from $url"

    if http_fetch_to "$url" "$dest"; then
      STATUS["$name"]="Downloaded"
      DETAIL["$name"]="$dest"
      render_table
      log "Downloaded $name -> $dest"

      STATUS["$name"]="Installing"
      DETAIL["$name"]="Installing..."
      render_table

      if pm_install_apk "$dest"; then
        STATUS["$name"]="Installed"
        DETAIL["$name"]="Installed and removed"
        rm -f "$dest" || true
        log "Installed $name successfully and deleted $dest"
        ok_count=$((ok_count+1))
      else
        STATUS["$name"]="InstallFailed"
        DETAIL["$name"]="$dest (left for inspection)"
        render_table
        log "WARN: Failed to install $name (left at $dest for inspection)"
      fi
    else
      STATUS["$name"]="DownloadFailed"
      DETAIL["$name"]="Could not fetch"
      render_table
      log "WARN: Could not download $name (skipping)"
      rm -f "$dest" || true
    fi
  done

  log "APK task finished: $ok_count/$total installed"
  render_table
}

# ---------------- Entry (non-interactive) ----------------
main() {
  echo "${APP_NAME} â€” one-shot APK downloader/installer"
  echo "Logs: $LOG_FILE"

  # Optional: uncomment to auto-escalate to root via tsu if you need it
  # if [ "$(id -u)" -ne 0 ]; then exec tsu -c "bash -lc '$0 \"$@\"'"; fi

  download_and_install_all

  echo "All done. Exiting."
  exit 0
}

main "$@"
