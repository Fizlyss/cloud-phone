#!/usr/bin/env bash
# Oneâ€‘Shot Clones Downloader â€” Interactive Menu + URL editor + persistent config
# Fixed: shows menu first (won't auto-run), added "Edit URLs" option and persistent config.

set -eo pipefail

# --------------- Paths & State ---------------
LOG_DIR="$HOME/.local/share/cryptic_termux"
APK_DIR="$HOME/apks"
TMP_DIR="$HOME/.tmp_cryptic"
STATE_DIR="$HOME/.cryptic_state"
LOG_FILE="$LOG_DIR/run.log"
CONFIG_FILE="$STATE_DIR/config.sh"

mkdir -p "$LOG_DIR" "$APK_DIR" "$TMP_DIR" "$STATE_DIR"

# --------------- Default Configuration (can be overridden by $CONFIG_FILE) ---------------
BASE_URL_DEFAULT="https://github.com/Fizlyss/cloud-phone/releases/download/er"
APK_NAMES_DEFAULT=( "Codex.0.apk" "Codex.1.apk" "Codex.2.apk" "Codex.3.apk" "Codex.4.apk" "Codex.5.apk" "Codex.6.apk" "Codex.7.apk" )

# --------------- Colors (Termux/ANSI) ---------------
RED="[31m"
GREEN="[32m"
YELLOW="[33m"
BLUE="[34m"
MAGENTA="[35m"
CYAN="[36m"
BOLD="[1m"
RESET="[0m"

# --------------- Utilities ---------------
timestamp() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }
log() { mkdir -p "$LOG_DIR"; printf "[%s] %s
" "$(timestamp)" "$*" | tee -a "$LOG_FILE"; }
die() { printf "[%s] FATAL: %s
" "$(timestamp)" "$*" | tee -a "$LOG_FILE" >&2; exit 1; }

http_fetch_to() {
  # $1 url, $2 dest
  local url="$1" dest="$2" tmp="${dest}.part"
  rm -f "$tmp"
  if curl -fsSL --retry 5 --retry-delay 2 --connect-timeout 20 -o "$tmp" "$url" 2>>"$LOG_FILE"; then
    mv -f "$tmp" "$dest"
    return 0
  else
    rm -f "$tmp"
    return 1
  fi
}

ensure_packages() {
  log "Ensuring basic packages (curl, jq, coreutils)..."
  apt update -y >>"$LOG_FILE" 2>&1 || true
  apt install -y curl coreutils jq busybox procps unzip >>"$LOG_FILE" 2>&1 || true
}

ensure_storage() {
  if command -v termux-setup-storage >/dev/null 2>&1; then
    log "Ensuring Termux storage access (if applicable)..."
    termux-setup-storage >/dev/null 2>&1 || true
  fi
  mkdir -p "$APK_DIR" "$TMP_DIR" "$LOG_DIR"
}

pm_install_apk() {
  local apk="$1"
  log "Attempting install/update: $apk"
  if /system/bin/pm install -r -d --user 0 "$apk" >>"$LOG_FILE" 2>&1; then return 0; fi
  if command -v cmd >/dev/null 2>&1 && cmd package install -r "$apk" >>"$LOG_FILE" 2>&1; then return 0; fi
  if /system/bin/pm install "$apk" >>"$LOG_FILE" 2>&1; then return 0; fi
  return 1
}

# --------------- Load / Save config ---------------
# Config file contains exported BASE_URL and APK_NAMES array definition.
load_config() {
  BASE_URL="$BASE_URL_DEFAULT"
  APK_NAMES=("${APK_NAMES_DEFAULT[@]}")
  if [ -f "$CONFIG_FILE" ]; then
    # shellcheck disable=SC1090
    source "$CONFIG_FILE" || log "Warning: failed to source $CONFIG_FILE"
  fi
}

save_config() {
  mkdir -p "$(dirname "$CONFIG_FILE")"
  {
    printf "# One-Shot Clones Downloader config (auto-saved)
"
    printf "BASE_URL=%q
" "$BASE_URL"
    printf "APK_NAMES=("
    for n in "${APK_NAMES[@]}"; do printf "%q " "$n"; done
    printf ")
"
  } >"$CONFIG_FILE"
  log "Saved config to $CONFIG_FILE"
}

# --------------- UI / Panel ---------------
HEADER_HEIGHT=9  # number of lines before the table starts

# status array (kept in sync with APK_NAMES)
declare -a STATUS
init_status() {
  STATUS=()
  for i in "${!APK_NAMES[@]}"; do
    STATUS[$i]="${YELLOW}Pending${RESET}"
  done
}

render_header() {
  clear
  cat <<EOF
${CYAN}${BOLD}  ____        _   _           _                 _           
 |  _ \ _   _| |_| |__   ___ | |__   __ _  ___| |__  _   _ 
 | |_) | | | | __| '_ \ / _ \| '_ \ / _\` |/ __| '_ \| | | |
 |  __/| |_| | |_| | | | (_) | |_) | (_| | (__| | | | |_| |
 |_|    \__, |\__|_| |_|\___/|_.__/ \__,_|\___|_| |_|\__, |
        |___/                                       |___/ 
${RESET}
EOF
  printf "   %s%s%s
" "${GREEN}" "Auto download Clones" "${RESET}"
  printf "   %s%s%s

" "${YELLOW}" "v.1 (one-shot mode)" "${RESET}"
  printf " %s%-30s %s %s
" "${CYAN}" "Package Operation Status" "${RESET}" ""
  printf " %s-----------------------------------------------%s

" "${CYAN}" "${RESET}"
  printf " ${BOLD}%-30s | %-15s${RESET}
" "Package" "Status"
  printf " %s-----------------------------------------------%s
" "${CYAN}" "${RESET}"
}

render_table() {
  render_header
  for idx in "${!APK_NAMES[@]}"; do
    local name="${APK_NAMES[$idx]}"
    printf " %-30s | %s
" "$name" "${STATUS[$idx]}"
  done
  printf "
"
}

set_status() {
  local idx="$1" val="$2"
  STATUS[$idx]="$val"
  render_table
}

# --------------- Interactive URL Editor ---------------
edit_urls() {
  while true; do
    clear
    echo -e "${BOLD}${CYAN}Edit download configuration${RESET}
"
    echo -e "Current BASE_URL: ${YELLOW}$BASE_URL${RESET}
"
    read -rp "Enter new BASE_URL (or press ENTER to keep): " newbase
    if [ -n "$newbase" ]; then
      BASE_URL="$newbase"
      log "BASE_URL set to $BASE_URL"
    fi

    echo -e "
Current APK list:"
    for i in "${!APK_NAMES[@]}"; do
      printf "  [%d] %s
" "$i" "${APK_NAMES[$i]}"
    done

    echo -e "
Actions:"
    echo "  1) Replace entire list (comma-separated)"
    echo "  2) Add an APK filename"
    echo "  3) Remove APK by index"
    echo "  4) Back to main menu"
    read -rp "Choose action [1-4]: " act
    case "$act" in
      1)
        read -rp "Enter filenames separated by commas (no spaces): " csv
        IFS=',' read -r -a newarr <<<"$csv"
        APK_NAMES=("")
        APK_NAMES=()
        for v in "${newarr[@]}"; do
          [ -n "$v" ] && APK_NAMES+=("$v")
        done
        init_status
        ;;
      2)
        read -rp "Enter filename to add (e.g. Codex.8.apk): " addn
        if [ -n "$addn" ]; then
          APK_NAMES+=("$addn")
          init_status
        fi
        ;;
      3)
        read -rp "Enter index to remove: " ridx
        if [[ "$ridx" =~ ^[0-9]+$ ]] && [ -n "${APK_NAMES[$ridx]}" ]; then
          unset 'APK_NAMES[ridx]'
          APK_NAMES=("${APK_NAMES[@]}")
          init_status
        else
          echo -e "${RED}Invalid index${RESET}"; sleep 1
        fi
        ;;
      4)
        save_config
        return
        ;;
      *) echo -e "${RED}Invalid choice${RESET}"; sleep 1 ;;
    esac
  done
}

# --------------- One-Shot Task (fixed to only run on user selection) ---------------
task_one_shot() {
  log "Starting enhanced one-shot APK download & update..."
  ensure_packages
  ensure_storage

  local ok=0 total=${#APK_NAMES[@]}
  render_table

  local start_ts=$(date +%s)
  for idx in "${!APK_NAMES[@]}"; do
    local name="${APK_NAMES[$idx]}"
    set_status "$idx" "${YELLOW}Downloading...${RESET}"
    local url="$BASE_URL/$name" dest="$APK_DIR/$name"

    if http_fetch_to "$url" "$dest"; then
      set_status "$idx" "${CYAN}Downloaded${RESET}"
      set_status "$idx" "${CYAN}Installing...${RESET}"
      if pm_install_apk "$dest"; then
        set_status "$idx" "${GREEN}Installed/Updated${RESET}"
        rm -f "$dest"
        ok=$((ok+1))
      else
        set_status "$idx" "${RED}Install Failed${RESET}"
      fi
    else
      set_status "$idx" "${RED}Download Failed${RESET}"
    fi

    # show progress summary
    local elapsed=$(( $(date +%s) - start_ts ))
    printf "
 %sProgress:%s %d/%d    Elapsed: %s sec
" "${MAGENTA}" "${RESET}" "$ok" "$total" "$elapsed"
  done

  log "Finished one-shot: $ok/$total installed/updated."
  echo
  read -rp "Press ENTER to return to menuâ€¦" _
}

# --------------- Menu ---------------
print_menu() {
  clear
  printf "%s%s Oneâ€‘Shot Clones Downloader %s

" "${BOLD}${CYAN}" "[menu]" "${RESET}"
  printf " %s1) Oneâ€‘Shot Mode (download & update) %s
" "${GREEN}" "${RESET}"
  printf " %s2) Edit download URLs & APK list      %s
" "${YELLOW}" "${RESET}"
  printf " %s3) Exit                               %s

" "${RED}" "${RESET}"
  read -rp "Select an option [1-3]: " choice
}

# --------------- Main Loop (fixed) ---------------
# load config and init status
load_config
init_status

# ensure we don't inherit a previous environment 'choice' variable
unset choice

while true; do
  print_menu
  case "$choice" in
    1) task_one_shot ;;
    2) edit_urls ;;
    3) echo -e "${CYAN}Exiting. Goodbye!${RESET}"; exit 0 ;;
    *) echo -e "${RED}Invalid choice. Try again.${RESET}"; sleep 1 ;;
  esac
done
